name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Upgrade pip
      run: python -m pip install --upgrade pip

    - name: Install dependencies
      run: pip install -r requirements.txt

    # - name: Run tests
    #   run: |
    #     # Aquí debes incluir los pasos para ejecutar las pruebas de tu aplicación, por ejemplo:
    #     # python -m unittest discover

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/challenge-devops:latest

    - name: Install and configure SSH client
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
        chmod 600 private_key

    - name: Deploy to VM
      env:
        VM_HOST: ${{ secrets.VM_HOST }}
        VM_USER: ${{ secrets.VM_USER }}
        DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_PASSWORD: ${{ secrets.DOCKER_HUB_PASSWORD }}
      run: |
        APP_NAME="challenge-devops"
        scp -i private_key -o StrictHostKeyChecking=no -r . $VM_USER@$VM_HOST:/tmp/challenge-devops
        ssh -i private_key -o StrictHostKeyChecking=no $VM_USER@$VM_HOST "bash -s" <<-EOF
          export KUBECONFIG=/root/.kube/config
          export DOCKER_REGISTRY=${{ secrets.DOCKER_REGISTRY }}
          export DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          export DOCKER_HUB_PASSWORD=${{ secrets.DOCKER_HUB_PASSWORD }}
          export APP_VERSION=latest
          envsubst < k8s/deployment.yml | kubectl apply -f -
          kubectl rollout status deployment/$APP_NAME
          kubectl apply -f k8s/service.yml
        EOF